import java.util.ArrayList;
import java.util.Scanner;

class Employee {
    private int id;
    private String name;
    private double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Salary: " + salary;
    }
}

public class EmployeeManagement {
    public static void main(String[] args) {
        ArrayList<Employee> employees = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Remove Employee");
            System.out.println("4. Search Employee");
            System.out.println("5. Display All Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    addEmployee(employees, scanner);
                    break;
                case 2:
                    updateEmployee(employees, scanner);
                    break;
                case 3:
                    removeEmployee(employees, scanner);
                    break;
                case 4:
                    searchEmployee(employees, scanner);
                    break;
                case 5:
                    displayAllEmployees(employees);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 6);
    }

    public static void addEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine();  // Consume newline
        System.out.print("Enter Employee Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Employee Salary: ");
        double salary = scanner.nextDouble();
        employees.add(new Employee(id, name, salary));
        System.out.println("Employee added successfully.");
    }

    public static void updateEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine();  // Consume newline
        Employee emp = findEmployeeById(employees, id);
        if (emp != null) {
            System.out.print("Enter new Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter new Salary: ");
            double salary = scanner.nextDouble();
            emp.setName(name);
            emp.setSalary(salary);
            System.out.println("Employee updated successfully.");
        } else {
            System.out.println("Employee not found.");
        }
    }

    public static void removeEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to remove: ");
        int id = scanner.nextInt();
        Employee emp = findEmployeeById(employees, id);
        if (emp != null) {
            employees.remove(emp);
            System.out.println("Employee removed successfully.");
        } else {
            System.out.println("Employee not found.");
        }
    }

    public static void searchEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to search: ");
        int id = scanner.nextInt();
        Employee emp = findEmployeeById(employees, id);
        if (emp != null) {
            System.out.println("Employee found: " + emp);
        } else {
            System.out.println("Employee not found.");
        }
    }

    public static void displayAllEmployees(ArrayList<Employee> employees) {
        if (employees.isEmpty()) {
            System.out.println("No employees to display.");
        } else {
            for (Employee emp : employees) {
                System.out.println(emp);
            }
        }
    }

    public static Employee findEmployeeById(ArrayList<Employee> employees, int id) {
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                return emp;
            }
        }
        return null;
    }
}










2)
import java.util.*;

class Card {
    private String symbol;
    private String rank;

    public Card(String symbol, String rank) {
        this.symbol = symbol;
        this.rank = rank;
    }

    public String getSymbol() {
        return symbol;
    }

    public String getRank() {
        return rank;
    }

    @Override
    public String toString() {
        return rank + " of " + symbol;
    }
}

public class CardCollection {
    public static void main(String[] args) {
        List<Card> deck = new ArrayList<>();
        deck.add(new Card("Hearts", "Ace"));
        deck.add(new Card("Hearts", "2"));
        deck.add(new Card("Diamonds", "King"));
        deck.add(new Card("Spades", "3"));
        deck.add(new Card("Clubs", "Queen"));
        deck.add(new Card("Hearts", "4"));
        deck.add(new Card("Spades", "Jack"));
        
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter symbol (Hearts, Diamonds, Spades, Clubs) to find all cards: ");
        String symbol = scanner.nextLine();

        System.out.println("Cards in the symbol " + symbol + ":");
        findCardsBySymbol(deck, symbol);
    }

    public static void findCardsBySymbol(List<Card> deck, String symbol) {
        for (Card card : deck) {
            if (card.getSymbol().equalsIgnoreCase(symbol)) {
                System.out.println(card);
            }
        }
    }
}



3)

class TicketBooking implements Runnable {
    private static int availableSeats = 10;
    private static final Object lock = new Object();
    private String customerName;
    private Thread thread;

    public TicketBooking(String customerName) {
        this.customerName = customerName;
        thread = new Thread(this, customerName);
        thread.setPriority(customerName.equals("VIP") ? Thread.MAX_PRIORITY : Thread.NORM_PRIORITY);
        thread.start();
    }

    @Override
    public void run() {
        synchronized (lock) {
            if (availableSeats > 0) {
                System.out.println(customerName + " booked a seat. Available seats: " + (--availableSeats));
            } else {
                System.out.println("Sorry, no seats available for " + customerName);
            }
        }
    }

    public static void main(String[] args) {
        new TicketBooking("VIP");
        new TicketBooking("Regular");
        new TicketBooking("Regular");
        new TicketBooking("VIP");
        new TicketBooking("Regular");
    }
}
